name: Build & Push Prod Image to ECR

on:
  workflow_run:
    workflows: ["CI test"]
    types:
      - completed

jobs:
  deploy:
    if: >
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    environment: prod

    services:
        docker: # optional，GitHub 已預裝 Docker
          image: docker:24.0.6
          options: --privileged
    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set env vars
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_NAME: ${{ vars.DATABASE_NAME }}
          DATABASE_USER: ${{ vars.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ vars.DATABASE_HOST }}
          DATABASE_PORT: ${{ vars.DATABASE_PORT }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
            echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> .env
            echo "DATABASE_NAME=${DATABASE_NAME}" >> .env
            echo "DATABASE_USER=${DATABASE_USER}" >> .env
            echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> .env
            echo "DATABASE_HOST=${DATABASE_HOST}" >> .env
            echo "DATABASE_PORT=${DATABASE_PORT}" >> .env
            echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> .env
            echo "SERPAPI_API_KEY=${SERPAPI_API_KEY}" >> .env
            echo "POSTGRES_DB=${POSTGRES_DB}" >> backend/.env
            echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> backend/.env
            echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> backend/.env
            echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> backend/.env
            echo "ECR_REPO_URL=${ECR_REPO_URL}" >> backend/.env
            echo "POSTGRES_USER=${POSTGRES_USER}" >> backend/.env
            echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> backend/.env
      
      - name: Start containers to verify services
        run: |
            docker compose -f docker-compose-prod.yml up --build --detach --wait --wait-timeout 60
        working-directory: ./backend

      - name: Tear down containers before build
        run: docker compose -f docker-compose-prod.yml down --volumes
        working-directory: ./backend


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2  # 根據你使用的區域調整

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-2 | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com

      - name: Build Docker image with Compose
        run: |
          docker compose -f docker-compose-prod.yml build web-prod
        working-directory: ./backend

      - name: Tag image
        run: |
          docker tag web-prod:latest ${{ secrets.ECR_REPO_URL }}:latest
        working-directory: ./backend

      - name: Push image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URL }}:latest
        working-directory: ./backend