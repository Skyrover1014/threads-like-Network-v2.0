name: CI test

on:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - "**"

jobs:
  test:
    runs-on: ubuntu-latest
    environment: test


    services:
      docker: # optional，GitHub 已預裝 Docker
        image: docker:24.0.6
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set env vars
        run: echo "DOCKER COMPOSE START"
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KET }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      
      - name: Debug Show POSTGRES_PASSWORD
        run: echo "POSTGRES_PASSWORD is $POSTGRES_PASSWORD"
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      - name: Write .env file
        run: |
          echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> backend/.env
          echo "DATABASE_NAME=${DATABASE_NAME}" >> backend/.env
          echo "DATABASE_USER=${DATABASE_USER}" >> backend/.env
          echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> backend/.env
          echo "DATABASE_HOST=${DATABASE_HOST}" >> backend/.env
          echo "DATABASE_PORT=${DATABASE_PORT}" >> backend/.env
          echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> backend/.env
          echo "SERPAPI_API_KEY=${SERPAPI_API_KEY}" >> backend/.env
          echo "POSTGRES_DB=${POSTGRES_DB}" >> backend/.env
          echo "POSTGRES_USER=${POSTGRES_USER}" >> backend/.env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> backend/.env

      - name: Run tests
        run: |
          docker compose -f docker-compose-test.yml up --build --abort-on-container-exit
        working-directory: ./backend
        env:
            POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Tear down
        if: always()
        run: |
          docker compose -f docker-compose-test.yml down --volumes
        working-directory: ./backend