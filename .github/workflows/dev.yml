name: CI Dev

on:
  push:
    branches: [dev]

jobs:
  dev:
    runs-on: ubuntu-latest
    environment: dev

    services:
      docker:
        image: docker:24.0.6
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set env vars and write .env file
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_NAME: ${{ vars.DATABASE_NAME }}
          DATABASE_USER: ${{ vars.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ vars.DATABASE_HOST }}
          DATABASE_PORT: ${{ vars.DATABASE_PORT }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> backend/.env
          echo "DATABASE_NAME=${DATABASE_NAME}" >> backend/.env
          echo "DATABASE_USER=${DATABASE_USER}" >> backend/.env
          echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> backend/.env
          echo "DATABASE_HOST=${DATABASE_HOST}" >> backend/.env
          echo "DATABASE_PORT=${DATABASE_PORT}" >> backend/.env
          echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> backend/.env
          echo "SERPAPI_API_KEY=${SERPAPI_API_KEY}" >> backend/.env
          echo "POSTGRES_DB=${POSTGRES_DB}" >> backend/.env
          echo "POSTGRES_USER=${POSTGRES_USER}" >> backend/.env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> backend/.env

      - name: Build and start containers with smock check and migrate
        working-directory: ./backend
        run: |
          docker compose -f docker-compose.yml up --build --detach --wait --wait-timeout 60
          docker compose exec -T web-dev python manage.py check
          docker compose exec -T web-dev bash -c "python manage.py migrate"

      - name: Tear down
        if: always()
        run: |
          docker compose -f docker-compose.yml down --volumes
        working-directory: ./backend