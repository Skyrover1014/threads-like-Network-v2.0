name: CI/CD dev smoke test

on:
  push:
    branches: [dev]

jobs:
  dev:
    runs-on: ubuntu-latest
    environment: dev
    env:
      TAG: ${{ github.sha }}
      ECR_REPO:  ${{ secrets.ECR_REPO_URL }}

    services:
      docker:
        image: docker:24.0.6
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set env vars and write .env
        env:
          ENV: ${{ vars.ENV }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_NAME: ${{ vars.DATABASE_NAME }}
          DATABASE_USER: ${{ vars.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ vars.DATABASE_HOST }}
          DATABASE_PORT: ${{ vars.DATABASE_PORT }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          CELERY_BROKER_URL: ${{ vars.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ vars.CELERY_RESULT_BACKEND}}
          REDIS_URL: ${{ vars.REDIS_URL}}

        run: |
            echo "ENV=${ENV}" >> backend/.env
            echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> backend/.env
            echo "DATABASE_NAME=${DATABASE_NAME}" >> backend/.env
            echo "DATABASE_USER=${DATABASE_USER}" >> backend/.env
            echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> backend/.env
            echo "DATABASE_HOST=${DATABASE_HOST}" >> backend/.env
            echo "DATABASE_PORT=${DATABASE_PORT}" >> backend/.env
            echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> backend/.env
            echo "SERPAPI_API_KEY=${SERPAPI_API_KEY}" >> backend/.env
            echo "POSTGRES_DB=${POSTGRES_DB}" >> backend/.env
            echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> backend/.env
            echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> backend/.env
            echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> backend/.env
            echo "ECR_REPO_URL=${ECR_REPO_URL}" >> backend/.env
            echo "POSTGRES_USER=${POSTGRES_USER}" >> backend/.env
            echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> backend/.env
            echo "CELERY_BROKER_URL=${CELERY_BROKER_URL}" >> backend/.env
            echo "CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}" >> backend/.env
            echo "REDIS_URL=${REDIS_URL}" >> backend/.env


      - name: Build Images of Web, Celery and Celery Beat
        working-directory: ./backend
        run: |
          docker build --target runtime-web -t web:${TAG} .
          docker build --target runtime-celery -t celery:${TAG} .
          docker build --target runtime-celery-beat -t celery-beat:${TAG} .
         
      - name: Build Image of Nginx
        working-directory: ./backend/nginx
        run: |
          docker build -t nginx:${TAG} .
      
      - name: Smoke up compose
        working-directory: ./backend
        run: |
          TAG=${TAG} docker compose -f docker-compose-smoke-test.yml up -d --wait
          curl -fsS http://127.0.0.1:8080/healthz
      
      - name: Dump nginx effective config
        working-directory: ./backend
        run: docker compose -f docker-compose-smoke-test.yml exec -T nginx nginx -T
      
      - name: Run smoke tests
        working-directory: ./backend
        run: |
          curl -fsSI http://127.0.0.1:8080/static/
  
      - name: Tear down
        if: always()
        working-directory: ./backend
        run: docker compose -f docker-compose-smoke-test.yml down -v
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2 
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-2 | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com
    
      - name: Retag images
        working-directory: ./backend
        run: |
          docker tag web:${TAG} $ECR_REPO:web-${TAG}
          docker tag celery:${TAG} $ECR_REPO:celery-${TAG}
          docker tag celery-beat:${TAG} $ECR_REPO:celery-beat-${TAG}
      
      - name: Retag nginx
        working-directory: ./backend
        run: |
          docker tag nginx:${TAG} $ECR_REPO:nginx-${TAG}

      - name: Push images to ECR
        working-directory: ./backend
        run: |
          docker push $ECR_REPO:web-${TAG}
          docker push $ECR_REPO:celery-${TAG}
          docker push $ECR_REPO:celery-beat-${TAG}
      
      - name: Push nginx
        working-directory: ./backend
        run: docker push $ECR_REPO:nginx-${TAG}

          